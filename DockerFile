# create stage based on node for setting up environment
FROM node:12.6.0-alpine AS environment

    # copy package and package-lock before running npm install
    # this should allow the results of npm install to be cached
    # based on the hash of the package and package-lock file
    COPY package.json /app/
    COPY package-lock.json /app/
    WORKDIR /app
    RUN npm install
    COPY . /app

# create stage based on environment for building application
FROM environment as build
    # switch to directory where code was copied
    WORKDIR /app
    # default buildConfig to production
    ARG buildConfig=dev
    # build application, output to app/rain
    RUN npm run-script ng build -- --configuration=production --outputPath=signalr-host

# create stage for release based on nginx
FROM nginx:1.17-alpine as release
    # Remove default nginx website
    RUN rm -rf /usr/share/nginx/html/*
    # Copy all the files to the new image
    COPY --from=build /app/signalr-host /usr/share/nginx/html
    # Copy our nginx config as the new default for the server
    COPY --from=environment /app/default.conf /etc/nginx/conf.d/default.conf

    # Expose port 4200 for local testing, 443 for https, and 80 for 443 redirect
    EXPOSE 80 4200

    # run nginx
    CMD ["nginx", "-g", "daemon off;"]
